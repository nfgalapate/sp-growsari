"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var _ApptrailEventsClient_instances, _ApptrailEventsClient_baseApiUrl, _ApptrailEventsClient_apiKey, _ApptrailEventsClient_applicationId, _ApptrailEventsClient_uploadUrl, _ApptrailEventsClient_formData, _ApptrailEventsClient_getPostPolicy, _ApptrailEventsClient_parseAppIdFromKey, _ApptrailEventsClient_refreshPostPolicy, _ApptrailEventsClient_validateEvent;
Object.defineProperty(exports, "__esModule", { value: true });
exports.ApptrailEventsClient = exports.ApptrailError = void 0;
const path = __importStar(require("path"));
const https = __importStar(require("https"));
const phin_1 = __importDefault(require("phin"));
const form_data_1 = __importDefault(require("form-data"));
const ajv_1 = __importDefault(require("ajv"));
const uuid_1 = require("uuid");
const exponential_backoff_1 = require("exponential-backoff");
const raw_event_schema_json_1 = __importDefault(require("./raw-event-schema.json"));
const ajv_formats_1 = __importDefault(require("ajv-formats"));
const httpsAgent = new https.Agent({
    keepAlive: true,
});
const decodeBase64Str = (b64Str) => Buffer.from(b64Str, "base64").toString("utf8");
/** The ApptrailEventsClient will always throw this error in the case of an error.
 * You should handle and sideline errors, especially for critical audit events.
 *
 * @see http://apptrail.com/docs/applications/guide/working-with-events/using-the-events-sdk/application-events-sdk-node#handling-errors
 */
class ApptrailError extends Error {
    constructor(message, code) {
        super(message);
        this.code = code !== null && code !== void 0 ? code : this.name;
    }
}
exports.ApptrailError = ApptrailError;
const ajv = new ajv_1.default();
(0, ajv_formats_1.default)(ajv);
const validateEvent = ajv.compile(raw_event_schema_json_1.default);
/**
 * You can use the Apptrail Application Events SDK for Node JS to send audit logs from your Javascript applications to your customers.
 *
 * @see http://apptrail.com/docs/applications/guide/working-with-events/using-the-events-sdk/application-events-sdk-node
 */
class ApptrailEventsClient {
    constructor(config) {
        _ApptrailEventsClient_instances.add(this);
        _ApptrailEventsClient_baseApiUrl.set(this, void 0);
        _ApptrailEventsClient_apiKey.set(this, void 0);
        _ApptrailEventsClient_applicationId.set(this, void 0);
        _ApptrailEventsClient_uploadUrl.set(this, void 0);
        _ApptrailEventsClient_formData.set(this, void 0);
        if (!config || !config.apiKey || !config.region) {
            throw new ApptrailError("Invalid configuration provided");
        }
        if (!["us-west-2"].includes(config.region)) {
            throw new ApptrailError("Invalid region.");
        }
        this.region = config.region;
        __classPrivateFieldSet(this, _ApptrailEventsClient_apiKey, config.apiKey, "f");
        __classPrivateFieldSet(this, _ApptrailEventsClient_applicationId, __classPrivateFieldGet(this, _ApptrailEventsClient_instances, "m", _ApptrailEventsClient_parseAppIdFromKey).call(this, __classPrivateFieldGet(this, _ApptrailEventsClient_apiKey, "f")), "f");
        __classPrivateFieldSet(this, _ApptrailEventsClient_baseApiUrl, `https://events.${this.region}.apptrail.com/applications/session`, "f");
    }
    /** Log a single audit event to Apptrail.  */
    async putEvent(event) {
        this.putEvents([event]);
    }
    /** Log multiple audit events to Apptrail. You can pass up to 1000 events to this method. To log
     * more events, make multiple calls to this method.
     */
    async putEvents(events) {
        if (!events || !events.length) {
            throw new ApptrailError("Must send at least one event.", "BadRequestException");
        }
        if (events.length > 1000) {
            throw new ApptrailError("Cannot send more than 1000 events. Please make multiple calls.", "BadRequestException");
        }
        if (__classPrivateFieldGet(this, _ApptrailEventsClient_formData, "f") == null || __classPrivateFieldGet(this, _ApptrailEventsClient_uploadUrl, "f") == null) {
            await __classPrivateFieldGet(this, _ApptrailEventsClient_instances, "m", _ApptrailEventsClient_refreshPostPolicy).call(this);
        }
        const formData = new form_data_1.default();
        let content = "";
        for (const event of events) {
            __classPrivateFieldGet(this, _ApptrailEventsClient_instances, "m", _ApptrailEventsClient_validateEvent).call(this, event);
            content += JSON.stringify(event) + "\n";
        }
        const filename = (0, uuid_1.v4)() + ".jsonl";
        const key = path.join(__classPrivateFieldGet(this, _ApptrailEventsClient_applicationId, "f"), filename);
        formData.append("key", key);
        for (const [k, v] of Object.entries(__classPrivateFieldGet(this, _ApptrailEventsClient_formData, "f"))) {
            formData.append(k, v);
        }
        formData.append("file", content, {
            filename,
            contentType: "application/jsonlines",
        });
        const doSend = async () => {
            const res = await (0, phin_1.default)({
                core: {
                    agent: httpsAgent,
                },
                url: __classPrivateFieldGet(this, _ApptrailEventsClient_uploadUrl, "f"),
                method: "POST",
                headers: formData.getHeaders(),
                data: formData.getBuffer(),
            });
            if (res.statusCode === 200)
                return;
            else if (res.statusCode === 403) {
                const resBody = res.body.toString();
                if (resBody.includes("Policy expired")) {
                    throw new ApptrailError("Session expired", "ATPolicyExpiredException");
                }
            }
            else if (res.statusCode && res.statusCode >= 500) {
                throw new ApptrailError("Server error while sending events.", "ATPutEventsServerException");
            }
            else {
                throw new ApptrailError("Error while sending events.");
            }
        };
        await (0, exponential_backoff_1.backOff)(() => doSend(), {
            jitter: "full",
            retry: async (e, attemptNum) => {
                if (e.code === "ATPolicyExpired") {
                    await __classPrivateFieldGet(this, _ApptrailEventsClient_instances, "m", _ApptrailEventsClient_refreshPostPolicy).call(this);
                    return true;
                }
                else if (e.code === "ATPutEventsServerException") {
                    return true;
                }
                else
                    return false;
            },
            numOfAttempts: 3,
        });
        console.log(`Apptrail: Successfully wrote ${events.length} events.`);
    }
}
exports.ApptrailEventsClient = ApptrailEventsClient;
_ApptrailEventsClient_baseApiUrl = new WeakMap(), _ApptrailEventsClient_apiKey = new WeakMap(), _ApptrailEventsClient_applicationId = new WeakMap(), _ApptrailEventsClient_uploadUrl = new WeakMap(), _ApptrailEventsClient_formData = new WeakMap(), _ApptrailEventsClient_instances = new WeakSet(), _ApptrailEventsClient_getPostPolicy = async function _ApptrailEventsClient_getPostPolicy() {
    const res = await (0, phin_1.default)({
        core: {
            agent: httpsAgent,
        },
        url: __classPrivateFieldGet(this, _ApptrailEventsClient_baseApiUrl, "f"),
        method: "GET",
        parse: "json",
        headers: { Authorization: `Bearer ${__classPrivateFieldGet(this, _ApptrailEventsClient_apiKey, "f")}` },
    });
    if (res.statusCode !== 200) {
        throw new ApptrailError(`Error refreshing credentials, status code: ${res.statusCode}`);
    }
    const resBody = res.body;
    return resBody;
}, _ApptrailEventsClient_parseAppIdFromKey = function _ApptrailEventsClient_parseAppIdFromKey(key) {
    try {
        const decodedKey = decodeBase64Str(key);
        const [applicationId] = decodedKey.split(",");
        return applicationId;
    }
    catch (error) {
        throw new ApptrailError("Invalid API Key.");
    }
}, _ApptrailEventsClient_refreshPostPolicy = async function _ApptrailEventsClient_refreshPostPolicy() {
    const result = await __classPrivateFieldGet(this, _ApptrailEventsClient_instances, "m", _ApptrailEventsClient_getPostPolicy).call(this);
    __classPrivateFieldSet(this, _ApptrailEventsClient_uploadUrl, result.uploadUrl, "f");
    __classPrivateFieldSet(this, _ApptrailEventsClient_formData, result.form, "f");
}, _ApptrailEventsClient_validateEvent = function _ApptrailEventsClient_validateEvent(event) {
    var _a;
    const valid = validateEvent(event);
    if (!valid) {
        const errors = (_a = validateEvent.errors) === null || _a === void 0 ? void 0 : _a.map(({ instancePath, message }) => ({ path: instancePath, message }));
        const errorMessage = `Invalid event shape. Errors: ${JSON.stringify(errors)}`;
        throw new ApptrailError(errorMessage);
    }
};
