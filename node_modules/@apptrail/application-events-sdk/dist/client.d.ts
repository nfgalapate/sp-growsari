import { ApptrailEvent } from "./event";
/** The ApptrailEventsClient will always throw this error in the case of an error.
 * You should handle and sideline errors, especially for critical audit events.
 *
 * @see http://apptrail.com/docs/applications/guide/working-with-events/using-the-events-sdk/application-events-sdk-node#handling-errors
 */
export declare class ApptrailError extends Error {
    code: string;
    constructor(message: string, code?: string);
}
/** Configuration for the Apptrail Events client. */
export interface ApptrailEventsClientConfig {
    /** The Apptrail region to send events to. Create a single instance of `ApptrailEventsClient` per region.
     * Regions are specified as strings, e.g. `us-west-2`.
     *
     * @see https://apptrail.com/docs/applications/guide/regions
     */
    region: string;
    /** Your Apptrail secret API Key. You can generate and retrieve API Keys from the Apptrail Dashboard.
     *
     * @see http://apptrail.com/docs/applications/guide/dashboard/managing-api-keys
     */
    apiKey: string;
}
/**
 * You can use the Apptrail Application Events SDK for Node JS to send audit logs from your Javascript applications to your customers.
 *
 * @see http://apptrail.com/docs/applications/guide/working-with-events/using-the-events-sdk/application-events-sdk-node
 */
export declare class ApptrailEventsClient {
    #private;
    region: string;
    constructor(config: ApptrailEventsClientConfig);
    /** Log a single audit event to Apptrail.  */
    putEvent(event: ApptrailEvent): Promise<void>;
    /** Log multiple audit events to Apptrail. You can pass up to 1000 events to this method. To log
     * more events, make multiple calls to this method.
     */
    putEvents(events: ApptrailEvent[]): Promise<void>;
}
